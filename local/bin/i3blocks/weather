#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime
import requests


WEATHER_ICONS = {
    "clear": '<span foreground="yellow">☀️</span>',
    "mainly_clear": '<span foreground="yellow">☀️</span>',
    "partly_cloudy": '<span foreground="yellow">⛅️</span>',
    "overcast": '<span foreground="gray">☁️</span>',
    "fog": '🌁',
    "drizzle": '<span foreground="#77BBFF">🌦</span>',
    "rain": '<span foreground="#3399FF">🌧</span>',
    "freezing_rain": '<span foreground="white">🌧</span>',
    "snow": '<span foreground="white">🌨</span>',
    "thunderstorm": '<span foreground="#3399FF">⛈</span>',
    "unknown": '✨',
}

WEATHER_CODES = {
    0: "clear",
    1: "mainly_clear",
    2: "partly_cloudy",
    3: "overcast",
    45: "fog",
    48: "fog",
    51: "drizzle", 53: "drizzle", 55: "drizzle",
    56: "freezing_rain", 57: "freezing_rain",
    61: "rain", 63: "rain", 65: "rain",
    66: "freezing_rain", 67: "freezing_rain",
    71: "snow", 73: "snow", 75: "snow", 77: "snow",
    80: "rain", 81: "rain", 82: "rain",
    85: "snow", 86: "snow",
    95: "thunderstorm", 96: "thunderstorm", 99: "thunderstorm",
}

def temp_to_colour(temp):
    if temp < -20:
        return '#4444FF'
    elif temp < -5:
        return '#5484F4'
    elif temp > 32:
        return '#CC1111'
    elif temp > 26:
        return '#CC6666'
    else:
        return '#AAAAAA'

def wind_to_colour(speed):
    if speed > 45:
        return 'red'
    elif speed > 25:
        return '#CC6666'
    elif speed > 8:
        return '#AAAAAA'
    else:
        return '#555555'

def precip_to_colour(p):
    if p > 20.0:
        return 'red'
    elif p > 7.6:
        return '#5484F4'
    elif p > 2.5:
        return '#7492C4'
    elif p > 0:
        return '#557799'
    else:
        return '#555555'

def wind_arrow(deg):
    deg = (deg + 180) % 360
    arrows = ["↑", "↗", "→", "↘", "↓", "↙", "←", "↖"]
    idx = round(deg / 45) % 8
    return arrows[idx]

ipinfo = requests.get("https://ipinfo.io/json").json()
lat, lon = ipinfo["loc"].split(",")
city = ipinfo.get("city", "Unknown")

now = datetime.utcnow().isoformat(timespec='minutes')
url = (
    f"https://api.open-meteo.com/v1/forecast"
    f"?latitude={lat}&longitude={lon}"
    f"&current_weather=true"
    f"&hourly=apparent_temperature,precipitation"
    f"&daily=temperature_2m_max,temperature_2m_min"
    f"&timezone=auto"
)
res = requests.get(url).json()

current = res["current_weather"]
code = WEATHER_CODES.get(current["weathercode"], "unknown")
icon = WEATHER_ICONS.get(code, WEATHER_ICONS["unknown"])

temp = current["temperature"]
wind_speed = current["windspeed"]
wind_dir = current["winddirection"]
current_time = current["time"]

cur_dt = datetime.strptime(current_time, "%Y-%m-%dT%H:%M")
hourly_times = [datetime.strptime(t, "%Y-%m-%dT%H:%M") for t in res["hourly"]["time"]]
idx = max(i for i, t in enumerate(hourly_times) if t <= cur_dt)
feels_like = res["hourly"]["apparent_temperature"][idx]
precip = res["hourly"]["precipitation"][idx]

high = res["daily"]["temperature_2m_max"][0]
low = res["daily"]["temperature_2m_min"][0]

temp_col = temp_to_colour(temp)
feels_col = temp_to_colour(feels_like)
wind_col = wind_to_colour(wind_speed)
precip_col = precip_to_colour(precip)

print(
     f"{city}"
     "<span foreground='#555555' letter_spacing='5000'>|</span>"
     f"{icon} "
     f"<span foreground='{temp_col}'>{temp:.0f}°C</span> "
     f"(<span foreground='{feels_col}'>{feels_like:.0f}°C</span>)"
     "<span foreground='#555555' letter_spacing='5000'>|</span>"
     f"🌡️<span foreground='#DD4444'>🠩</span>{high:.0f}°C <span foreground='#2222FF'>🠫</span>{low:.0f}°C"
     "<span foreground='#555555' letter_spacing='5000'>|</span>"
     f"<span foreground='{wind_col}'>💨 {wind_speed:.0f} km/h {wind_arrow(wind_dir)}</span>"
     "<span foreground='#555555' letter_spacing='5000'>|</span>"
     f"<span foreground='{precip_col}'>🌧️ {precip:.1f} mm</span>"
)
